{"version":3,"file":"index.es5.js","sources":["../../../../node_modules/@gondel/core/dist/GondelPluginUtils.js","../../../../node_modules/@gondel/core/dist/GondelDomUtils.js","../../../../node_modules/@gondel/core/dist/GondelEventRegistry.js","../../../../node_modules/@gondel/core/dist/index.js","index.js"],"sourcesContent":["var basePluginListener = function (result, data, next) { return next(result); };\n// Global plugin events registry\nexport var pluginEvents = window.__gondelPluginEvents || {};\nwindow.__gondelPluginEvents = pluginEvents;\nexport function fireGondelPluginEvent(eventName, initialValue, data, callback) {\n    var isSyncron = false;\n    var callbackResult;\n    // Execute all bound events for the given name\n    // if they exist\n    (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (processedResult) {\n        isSyncron = true;\n        callbackResult = callback ? callback(processedResult) : processedResult;\n    });\n    // Add a guard to prevent asyncron plugin listeners\n    // to simplify the usage of fireGondelPluginEvent\n    if (!isSyncron) {\n        throw new Error(\"Async plugin listener\");\n    }\n    return callbackResult;\n}\n/**\n * Fire an async event which allows gondel plugins to add features to gondel\n */\nexport function fireAsyncGondelPluginEvent(eventName, initialValue, data) {\n    return new Promise(function (resolve) {\n        (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (result) {\n            resolve(result);\n        });\n    });\n}\n/**\n * Allow plugins to hook into the gondel event system\n */\nexport function addGondelPluginEventListener(eventName, eventListenerCallback) {\n    if (!pluginEvents[eventName]) {\n        pluginEvents[eventName] = basePluginListener;\n    }\n    var previousEventHandler = pluginEvents[eventName];\n    pluginEvents[eventName] = function wrapCallback(result, data, next) {\n        previousEventHandler(result, data, function callNextPlugin(modifiedResult, _, firstNext) {\n            eventListenerCallback(modifiedResult, data, function bindData(result) {\n                next(result, data, firstNext);\n            });\n        });\n    };\n}\n//# sourceMappingURL=GondelPluginUtils.js.map","import { getComponentRegistry } from \"./GondelComponentRegistry\";\nimport { startComponentsFromRegistry } from \"./GondelComponentStarter\";\nexport var internalGondelRefAttribute = \"_gondel_\";\nexport var internalGondelAsyncRefAttribute = \"_gondelA_\";\n/**\n * Returns true if the given object is a single Element\n */\nfunction isElement(domNode) {\n    return domNode.nodeType !== undefined;\n}\n/**\n * This function normalizes takes one of the following:\n *  + document query result\n *  + dom node array\n *  + jquery object\n *  + a single dom node\n * and turns it into a single dom node\n */\nexport function getFirstDomNode(domNode) {\n    if (isElement(domNode)) {\n        return domNode;\n    }\n    return domNode[0];\n}\n/**\n * Start all nodes in the given context\n */\nexport function startComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var registry = getComponentRegistry(namespace);\n    return startComponentsFromRegistry(registry, domContext ? getFirstDomNode(domContext) : document.documentElement, namespace);\n}\n/**\n * Stop all nodes in the given context\n */\nexport function stopComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var components = findComponents(domContext, undefined, namespace);\n    if (domContext && hasMountedGondelComponent(domContext)) {\n        components.unshift(getComponentByDomNode(domContext));\n    }\n    components.forEach(function (component) { return component.stop(); });\n}\n/**\n * Checks if a component is mounted on a certain DOM node\n */\nexport function hasMountedGondelComponent(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[internalGondelRefAttribute + namespace];\n    if (!gondelComponent || !gondelComponent._ctx) {\n        // no anchor prop found or ctx missing. function is needed\n        // that we can type the `getComponentByDomNode` without possible\n        // returnal of undefined.\n        return false;\n    }\n    return true;\n}\n/**\n * Returns the gondel instance for the given HtmlELement\n */\nexport function getComponentByDomNode(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var gondelComponent = extractComponent(getFirstDomNode(domNode), namespace);\n    if (!gondelComponent) {\n        throw new Error(\"Could not find a started gondel component in namespace \\\"\" + namespace + \"\\\",\\nplease check if your component is mounted via 'hasMountedGondelComponent'\");\n    }\n    return gondelComponent;\n}\n/**\n * Internal helper function of getComponentByDomNode\n *\n * Returns the gondel instance from a known HtmlElement\n * This function is an internal helper with a possible undefined\n * return value.\n */\nexport function extractComponent(element, namespace) {\n    var gondelComponent = element[internalGondelRefAttribute + namespace];\n    // Stop if this dom node is not known to gondel\n    if (gondelComponent && gondelComponent._ctx) {\n        return gondelComponent;\n    }\n}\n/**\n * Returns the gondel instance for the given HtmlELement once it is booted\n */\nexport function getComponentByDomNodeAsync(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[internalGondelAsyncRefAttribute + namespace];\n    // Stop if this dom node is not known to gondel\n    if (!gondelComponent) {\n        return Promise.reject(undefined);\n    }\n    // or the component is already booted up return it\n    if (gondelComponent._ctx) {\n        return Promise.resolve(gondelComponent);\n    }\n    // Wait the component to boot up and return it\n    return gondelComponent.then(function () { return firstNode[internalGondelRefAttribute + namespace]; });\n}\n/**\n * Returns all components inside the given node\n */\nexport function findComponents(domNode, componentName, namespace) {\n    if (domNode === void 0) { domNode = document.documentElement; }\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var components = [];\n    var attribute = \"_gondel_\" + namespace;\n    var nodes = firstNode.querySelectorAll(\"[data-\" + namespace + \"-name\" + (componentName ? \"=\\\"\" + componentName + \"\\\"\" : \"\") + \"]\");\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var gondelComponentInstance = node[attribute];\n        // Verify that the component is fully booted\n        if (gondelComponentInstance && gondelComponentInstance._ctx === node) {\n            components.push(gondelComponentInstance);\n        }\n    }\n    return components;\n}\n//# sourceMappingURL=GondelDomUtils.js.map","/**\n * The event registry provides a way to bind events ahead of time\n * with a very small foot print during launch to improve the time to interaction\n */\nimport { extractComponent } from \"./GondelDomUtils\";\nimport { fireGondelPluginEvent } from \"./GondelPluginUtils\";\n/**\n * Only real browser events are supported.\n * Unfortunately focus and blur do not bubble so a special mapping is needed.\n */\nvar eventNameMapping = {\n    focus: \"focusin\",\n    blur: \"focusout\"\n};\n// Polyfill for element.prototype.matches\nvar matchesCssSelector = function (element, selector) {\n    var elementPrototype = window.Element.prototype;\n    /* istanbul ignore next : Browser polyfill can't be tested */\n    var elementMatches = elementPrototype.matches ||\n        elementPrototype.matchesSelector ||\n        elementPrototype.mozMatchesSelector ||\n        elementPrototype.msMatchesSelector ||\n        elementPrototype.webkitMatchesSelector;\n    // Cache the function and call it\n    return (matchesCssSelector = function (element, selector) {\n        return elementMatches.call(element, selector);\n    })(element, selector);\n};\nfunction getParentElements(startElement) {\n    var nodes = [];\n    for (var element = startElement; element; element = element.parentElement) {\n        nodes.push(element);\n    }\n    return nodes;\n}\n/**\n * Returns an array of all handlers which would apply for the current target\n */\nexport function getHandlers(attributeName, eventHandlerRegistry, target) {\n    var parents = getParentElements(target);\n    // Find all selectors which have been registred for this event type\n    // and which have a gondel component in one of the parrent nodes\n    var selectorsOfFoundComponents = [];\n    parents.forEach(function (parent, i) {\n        var componentName = parent.getAttribute(attributeName);\n        var handlers = componentName && eventHandlerRegistry[componentName];\n        if (handlers) {\n            // Store the index where the component was found to know in which part\n            // of the dom tree the selectors could be found\n            selectorsOfFoundComponents.push({ index: i, handlers: handlers });\n        }\n    });\n    // Iterate over all possible selectors to find out if the current event\n    // should fire any gondel handler\n    var handlerQueue = [];\n    selectorsOfFoundComponents.forEach(function (_a) {\n        var index = _a.index, handlers = _a.handlers;\n        var selectorNames = Object.keys(handlers);\n        selectorNames.forEach(function (selectorName) {\n            // If no selector is given the handler does always match\n            if (!selectorName) {\n                return handlerQueue.push({\n                    index: index,\n                    ctx: parents[index],\n                    target: parents[index],\n                    handlerOptions: handlers[selectorName]\n                });\n            }\n            // Iterate backwards over the children of the component to find an element\n            // which matches the selector for the current handler\n            for (var i = index; --i >= 0;) {\n                if (matchesCssSelector(parents[i], selectorName)) {\n                    return handlerQueue.push({\n                        index: i,\n                        ctx: parents[index],\n                        target: parents[i],\n                        handlerOptions: handlers[selectorName]\n                    });\n                }\n            }\n        });\n    });\n    // Break if we couldn't find any matching element\n    if (handlerQueue.length === 0) {\n        return [];\n    }\n    // Sort the queue so events which are further up the dom are fired first\n    handlerQueue.sort(function (handlerA, handlerB) {\n        return handlerA.index > handlerB.index ? 1 : handlerA.index === handlerB.index ? 0 : -1;\n    });\n    return handlerQueue;\n}\n/**\n * The handler which will catch every event at the documentElement\n */\nfunction handleEvent(namespace, attributeName, eventHandlerRegistry, event) {\n    var target = event.target;\n    var handlers = getHandlers(attributeName, eventHandlerRegistry, target);\n    executeHandlers(handlers, event, namespace);\n}\nvar _domEventRegistry;\n/**\n * Returns the namespace registry for the given namespace..\n * This function must be used only by core or plugins\n */\nexport function getEventRegistry(namespace) {\n    if (!_domEventRegistry) {\n        _domEventRegistry = window[\"__\\ud83d\\udea1DomEvents\"] || {};\n        window[\"__\\ud83d\\udea1DomEvents\"] = _domEventRegistry;\n    }\n    if (!_domEventRegistry[namespace]) {\n        _domEventRegistry[namespace] = {};\n    }\n    return _domEventRegistry[namespace];\n}\n/**\n * Notify components\n * This function must be used by core or only by plugins\n */\nexport function executeHandlers(handlers, event, namespace) {\n    /** Store wether the original Event was modified to provide the correct currentTarget */\n    var eventObjectRequiresCleanup = false;\n    /** Store optional callback results which are executed together to allow grouped redraws */\n    var results = [];\n    var _loop_1 = function (i) {\n        var handlerObject = handlers[i];\n        var handlerOptions = handlerObject.handlerOptions;\n        var gondelComponent = extractComponent(handlerObject.ctx, namespace);\n        // Skip if the component wasn't started or if it was stopped\n        if (gondelComponent) {\n            // See https://stackoverflow.com/questions/52057726/what-is-the-best-way-to-alter-a-native-browser-event\n            Object.defineProperty(event, \"currentTarget\", {\n                get: function () { return handlerObject.target; },\n                configurable: true\n            });\n            eventObjectRequiresCleanup = true;\n            for (var j = 0; j < handlerOptions.length && !event.cancelBubble; j++) {\n                var handlerResult = gondelComponent[handlerOptions[j].handlerName].call(gondelComponent, event);\n                if (typeof handlerResult === \"function\") {\n                    results.push(handlerResult);\n                }\n            }\n        }\n    };\n    for (var i = 0; i < handlers.length && !event.cancelBubble; i++) {\n        _loop_1(i);\n    }\n    // Execute all callbacks to allow grouping write events\n    results.forEach(function (result) {\n        result();\n    });\n    // Cleanup the event object\n    if (eventObjectRequiresCleanup) {\n        // See https://stackoverflow.com/questions/52057726/what-is-the-best-way-to-alter-a-native-browser-event\n        delete event.currentTarget;\n    }\n}\n/**\n * Add a event lister to the <html> element\n * The listener will always call handleEvent with the domEventRegistry for the given event\n */\nfunction startListeningForEvent(eventName, namespace) {\n    document.documentElement.addEventListener(eventNameMapping[eventName] || eventName, handleEvent.bind(null, namespace, \"data-\" + namespace + \"-name\", getEventRegistry(namespace)[eventName]));\n}\n/**\n * Add an event to the Gondel EventRegistry\n */\nexport function addRootEventListener(namespace, domEventName, gondelComponentName, handlerName, handlerOption) {\n    // Create namespace if neededi\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    // Notify all plugins to allow taking over the event handling for a specific event name\n    // This notification is only triggered if a event name e.g. 'click' is used for the first time\n    if (!namespacedDomEventRegistry[domEventName]) {\n        namespacedDomEventRegistry[domEventName] = {};\n        fireGondelPluginEvent(\"registerEvent\", true, {\n            eventName: domEventName,\n            namespace: namespace,\n            eventRegistry: namespacedDomEventRegistry[domEventName]\n        }, function (isNativeEvent) {\n            // If no plugin registered the event\n            // register a native browser event\n            if (isNativeEvent) {\n                startListeningForEvent(domEventName, namespace);\n            }\n        });\n    }\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName] = {};\n    }\n    var handlerOptionObject = typeof handlerOption === \"object\" ? handlerOption : { selector: handlerOption };\n    var selectorKey = handlerOptionObject.selector || \"\";\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = [];\n    }\n    namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].push(Object.assign({ handlerName: handlerName, handlerOption: handlerOption }));\n}\n/**\n * Remove an event from the Gondel EventRegistry\n */\nexport function removeRootEventListener(namespace, domEventName, gondelComponentName, handlerName, selector) {\n    var selectorKey = selector || \"\";\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    if (namespacedDomEventRegistry[domEventName] &&\n        namespacedDomEventRegistry[domEventName][gondelComponentName] &&\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].filter(function (handlerOption) {\n            return handlerOption.handlerName !== handlerName || handlerName === undefined;\n        });\n    }\n}\n/**\n * Remove all events for a given Component (e.g. a Button) from the Gondel EventRegistry\n */\nexport function removeRootEventListernerForComponent(namespace, gondelComponentName) {\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    for (var eventName in namespacedDomEventRegistry) {\n        /* istanbul ignore else: for in savety check */\n        if (namespacedDomEventRegistry.hasOwnProperty(eventName)) {\n            delete namespacedDomEventRegistry[eventName][gondelComponentName];\n        }\n    }\n}\n//# sourceMappingURL=GondelEventRegistry.js.map","// Export helpers to hook into the gondel frameworks (should only be used by plugins)\nexport { addGondelPluginEventListener } from \"./GondelPluginUtils\";\n// Export helpers to interact with DOM e.g. start a gondel component for a given DOM node\n// or get a running gondel component instance for a given DOM node\nexport { getFirstDomNode, startComponents, stopComponents, hasMountedGondelComponent, getComponentByDomNode, getComponentByDomNodeAsync, findComponents } from \"./GondelDomUtils\";\n// Export https://github.com/tc39/proposal-decorators decorators e.g. @EventListener or @Component\nexport * from \"./GondelDecorators\";\n// Export event helpers to send custom events to React/Angular or foreign gondel components\nexport * from \"./GondelEventEmitter\";\n// Export types of the Gondel Component instance\nexport * from \"./GondelComponent\";\n// Export a helper which allows registring components without using decorators\nexport { registerComponent } from \"./GondelComponentRegistry\";\n// Allow to disable the autobooting feature\nexport { disableAutoStart } from \"./GondelAutoStart\";\n//# sourceMappingURL=index.js.map","/**\r\n * This is a gondel plugin which add a custom gondel resize event\r\n */\r\nimport { addGondelPluginEventListener, getComponentByDomNode } from \"@gondel/core\";\r\n/**\r\n * The COMPONENT_RESIZED_EVENT event will be fired if a component size was changed because of a browser window resize\r\n */\r\nexport var COMPONENT_RESIZED_EVENT = \"@gondel/plugin-resize--component-resized\";\r\n/**\r\n * The WINDOW_RESIZED_EVENT event will be fired if the browser window was resized\r\n */\r\nexport var WINDOW_RESIZED_EVENT = \"@gondel/plugin-resize--window-resized\";\r\n/**\r\n * This function returns all components for the given eventRegistry which can be found in the dom.\r\n */\r\nfunction getComponentsInEventRegistry(eventRegistry, namespace) {\r\n    var selector = Object.keys(eventRegistry)\r\n        .map(function (componentName) { return \"[data-\" + namespace + \"-name=\\\"\" + componentName + \"\\\"]\"; })\r\n        .join(\",\");\r\n    if (!selector) {\r\n        return [];\r\n    }\r\n    var componentElements = document.documentElement.querySelectorAll(selector);\r\n    var components = [];\r\n    for (var i = 0; i < componentElements.length; i++) {\r\n        var component = getComponentByDomNode(componentElements[i], namespace);\r\n        if (component) {\r\n            components.push(component);\r\n        }\r\n    }\r\n    return components;\r\n}\r\n/**\r\n * Add @EventListener('resize')\r\n *\r\n * This will allow components to listen for throttled window resize events\r\n * The resize event will only be fired for a component if the width or the height of the component changed\r\n */\r\nvar initializeResizeEvent = function (eventRegistry, namespace, eventName) {\r\n    var isRunning = false;\r\n    var frameIsRequested = false;\r\n    var resizeDoneTimer;\r\n    var componentInformation;\r\n    var fireResizeEvent = eventName === WINDOW_RESIZED_EVENT ? fireWindowResizeEvent : fireComponentResizeEvent;\r\n    /**\r\n     * This handler is called if a new resize event happens.\r\n     * A resize event is new if no resize occurred for 250ms\r\n     */\r\n    function startResizeWatching(event) {\r\n        var components = getComponentsInEventRegistry(eventRegistry, namespace);\r\n        isRunning = true;\r\n        // The resize listener is fired very often\r\n        // for performance optimisations we search and store\r\n        // all components during the initial start event\r\n        componentInformation = components.map(function (component) {\r\n            var size = component.__resizeSize || {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n            var gondelComponentHandlers = eventRegistry[component._componentName];\r\n            return {\r\n                component: component,\r\n                node: component._ctx,\r\n                selectors: Object.keys(gondelComponentHandlers).map(function (selector) {\r\n                    return gondelComponentHandlers[selector].map(function (handlerOption) { return component[handlerOption.handlerName]; });\r\n                }),\r\n                width: size.width,\r\n                height: size.height\r\n            };\r\n        });\r\n        fireResizeEvent(event);\r\n    }\r\n    /**\r\n     * Clean up after no resize event happened for 250ms\r\n     */\r\n    function stopResizeWatching() {\r\n        // If there is still a throttled resize handler\r\n        // wait until it is done\r\n        if (frameIsRequested) {\r\n            requestAnimationFrame(stopResizeWatching);\r\n            return;\r\n        }\r\n        // Memory cleanup\r\n        isRunning = false;\r\n        componentInformation = undefined;\r\n    }\r\n    /**\r\n     * Check which modules changed in size, are still running and call their event handler\r\n     */\r\n    function fireComponentResizeEvent(event) {\r\n        frameIsRequested = false;\r\n        if (!componentInformation) {\r\n            return;\r\n        }\r\n        var newSizes = componentInformation.map(function (_a) {\r\n            var node = _a.node;\r\n            return ({\r\n                width: node.clientWidth,\r\n                height: node.clientHeight\r\n            });\r\n        });\r\n        var handlerResults = [];\r\n        componentInformation.forEach(function (componentInformation, i) {\r\n            var newSize = newSizes[i];\r\n            // Skip if the size did not change\r\n            if (newSize.width === componentInformation.width &&\r\n                newSize.height === componentInformation.height) {\r\n                return;\r\n            }\r\n            // Skip if the component is not running anymore\r\n            if (componentInformation.component._stopped) {\r\n                return;\r\n            }\r\n            componentInformation.component.__resizeSize = newSize;\r\n            componentInformation.width = newSize.width;\r\n            componentInformation.height = newSize.height;\r\n            componentInformation.selectors.forEach(function (selector) {\r\n                return selector.forEach(function (handler) {\r\n                    return handlerResults.push(handler.call(componentInformation.component, event, newSize));\r\n                });\r\n            });\r\n        });\r\n        handlerResults.forEach(function (handlerResult) {\r\n            if (typeof handlerResult === \"function\") {\r\n                handlerResult();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Check if the components are still running and call their event handler\r\n     */\r\n    function fireWindowResizeEvent(event) {\r\n        frameIsRequested = false;\r\n        if (!componentInformation) {\r\n            return;\r\n        }\r\n        var handlerResults = [];\r\n        componentInformation.forEach(function (componentInformation, i) {\r\n            // Skip if the component is not running anymore\r\n            if (componentInformation.component._stopped) {\r\n                return;\r\n            }\r\n            componentInformation.selectors.forEach(function (selector) {\r\n                return selector.forEach(function (handler) {\r\n                    return handlerResults.push(handler.call(componentInformation.component, event));\r\n                });\r\n            });\r\n        });\r\n        handlerResults.forEach(function (handlerResult) {\r\n            if (typeof handlerResult === \"function\") {\r\n                handlerResult();\r\n            }\r\n        });\r\n    }\r\n    window.addEventListener(\"resize\", function (event) {\r\n        if (!isRunning) {\r\n            startResizeWatching(event);\r\n        }\r\n        else if (!frameIsRequested) {\r\n            frameIsRequested = true;\r\n            window.requestAnimationFrame(fireResizeEvent.bind(null, event));\r\n        }\r\n        clearTimeout(resizeDoneTimer);\r\n        resizeDoneTimer = setTimeout(stopResizeWatching, 250);\r\n    });\r\n};\r\n/**\r\n * This function creates a custom gondel event\r\n */\r\nexport function initResizePlugin() {\r\n    addGondelPluginEventListener(\"registerEvent\", function addResizeEvent(isNativeEvent, _a, resolve) {\r\n        var eventName = _a.eventName, namespace = _a.namespace, eventRegistry = _a.eventRegistry;\r\n        // Ignore all events but the resize events\r\n        if (eventName !== WINDOW_RESIZED_EVENT && eventName !== COMPONENT_RESIZED_EVENT) {\r\n            resolve(isNativeEvent);\r\n            return;\r\n        }\r\n        initializeResizeEvent(eventRegistry, namespace, eventName);\r\n        // Tell the event system that it should not listen for the event:\r\n        resolve(false);\r\n    });\r\n    addGondelPluginEventListener(\"sync\", function addResizeEvent(components, data, resolve) {\r\n        setTimeout(function () {\r\n            components.forEach(function (component) {\r\n                component.__resizeSize = {\r\n                    width: component._ctx.clientWidth,\r\n                    height: component._ctx.clientHeight\r\n                };\r\n            });\r\n        });\r\n        resolve(components);\r\n    });\r\n}\r\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}